install.packages("testthat",repos="https://cloud.r-project.org")
library(testthat)
}
letters
if ( require("testthat") == FALSE ) {
install.packages("testthat",repos="https://cloud.r-project.org")
library(testthat)
}
f("B")
if ( require("testthat") == FALSE ) {
install.packages("testthat",repos="https://cloud.r-project.org")
library(testthat)
}
test_that(desc = "Test for improper input (numeric)",       expect_error(char2int(1)))
if ( require("testthat") == FALSE ) {
install.packages("testthat",repos="https://cloud.r-project.org")
library(testthat)
}
test_that(desc = "Test for improper input (numeric)",       expect_error(char2int(1)))
test_that(desc = "Test for improper input (numeric)",       expect_error(char2int(#)))
if ( require("testthat") == FALSE ) {
install.packages("testthat",repos="https://cloud.r-project.org")
library(testthat)
}
test_that(desc = "Test for improper input (numeric)",       expect_error(char2int(1)))
test_that(desc = "Test for improper input (numeric)",       expect_error(char2int(%)))
if ( require("testthat") == FALSE ) {
install.packages("testthat",repos="https://cloud.r-project.org")
library(testthat)
}
test_that(desc = "Test for improper input (numeric)",       expect_error(char2int(1)))
test_that(desc = "Test for improper input (numeric)",       expect_error(char2int("%")))
if ( require("testthat") == FALSE ) {
install.packages("testthat",repos="https://cloud.r-project.org")
library(testthat)
}
test_that(desc = "Test for improper input (numeric)",       expect_error(f(1)))
test_that(desc = "Test for improper input (numeric)",       expect_error(f("%")))
if ( require("testthat") == FALSE ) {
install.packages("testthat",repos="https://cloud.r-project.org")
library(testthat)
}
test_that(desc = "Test for improper input (numeric)",       expect_error(f(1)))
test_that(desc = "Test for improper input (symbol)",       expect_error(f("%")))
test_that(desc = "Test for propoer input (numeric)",       expected_equal(f("a"),0))
test_that(desc = "Test for improper input (numeric)",       expected_equal(f("A"),0))
if ( require("testthat") == FALSE ) {
install.packages("testthat",repos="https://cloud.r-project.org")
library(testthat)
}
test_that(desc = "Test for improper input (numeric)",       expect_error(f(1)))
test_that(desc = "Test for improper input (symbol)",       expect_error(f("%")))
test_that(desc = "Test for propoer input (numeric)",       expect_equal(f("a"),0))
test_that(desc = "Test for improper input (numeric)",       expect_equal(f("A"),0))
if ( require("testthat") == FALSE ) {
install.packages("testthat",repos="https://cloud.r-project.org")
library(testthat)
}
f(b)
test_that(desc = "Test for improper input (numeric)",       expect_error(f(1)))
test_that(desc = "Test for improper input (symbol)",       expect_error(f("%")))
test_that(desc = "Test for propoer input (numeric)",       expect_equal(f("a"),0))
test_that(desc = "Test for improper input (numeric)",       expect_equal(f("A"),0))
test_that(desc = "Test for improper input (numeric)",       expect_equal(f("B u"),0))
if ( require("testthat") == FALSE ) {
install.packages("testthat",repos="https://cloud.r-project.org")
library(testthat)
}
f('b')
test_that(desc = "Test for improper input (numeric)",       expect_error(f(1)))
test_that(desc = "Test for improper input (symbol)",       expect_error(f("%")))
test_that(desc = "Test for propoer input (numeric)",       expect_equal(f("a"),0))
test_that(desc = "Test for improper input (numeric)",       expect_equal(f("A"),0))
test_that(desc = "Test for improper input (numeric)",       expect_equal(f("B u"),0))
if ( require("testthat") == FALSE ) {
install.packages("testthat",repos="https://cloud.r-project.org")
library(testthat)
}
f('b')
test_that(desc = "Test for improper input (numeric)",       expect_error(f(1)))
test_that(desc = "Test for improper input (symbol)",       expect_error(f("%")))
test_that(desc = "Test for propoer input (numeric)",       expect_equal(f("a"),0))
test_that(desc = "Test for improper input (numeric)",       expect_equal(f("A"),0))
test_that(desc = "Test for improper input (numeric)",       expect_equal(f("B u"),'decimal'))
if ( require("testthat") == FALSE ) {
install.packages("testthat",repos="https://cloud.r-project.org")
library(testthat)
}
f('b')
test_that(desc = "Test for improper input (numeric)",       expect_error(f(1)))
test_that(desc = "Test for improper input (symbol)",       expect_error(f("%")))
test_that(desc = "Test for propoer input (numeric)",       expect_equal(f("a"),0))
test_that(desc = "Test for improper input (numeric)",       expect_equal(f("A"),0))
test_that(desc = "Test for improper input (numeric)",       expect_equal(f("B u"),'double'))
if ( require("testthat") == FALSE ) {
install.packages("testthat",repos="https://cloud.r-project.org")
library(testthat)
}
f('b')
test_that(desc = "Test for improper input (numeric)",       expect_error(f(1)))
test_that(desc = "Test for improper input (symbol)",       expect_error(f("%")))
test_that(desc = "Test for propoer input (numeric)",       expect_equal(f("a"),0))
test_that(desc = "Test for improper input (numeric)",       expect_equal(f("A"),0))
test_that(desc = "Test for improper input (numeric)",       expect_type(f("B u"),'double'))
if ( require("testthat") == FALSE ) {
install.packages("testthat",repos="https://cloud.r-project.org")
library(testthat)
}
f("B u")
test_that(desc = "Test for improper input (numeric)",       expect_error(f(1)))
test_that(desc = "Test for improper input (symbol)",       expect_error(f("%")))
test_that(desc = "Test for propoer input (numeric)",       expect_equal(f("a"),0))
test_that(desc = "Test for improper input (numeric)",       expect_equal(f("A"),0))
test_that(desc = "Test for improper input (numeric)",       expect_type(f("B u"),'double'))
if ( require("testthat") == FALSE ) {
install.packages("testthat",repos="https://cloud.r-project.org")
library(testthat)
}
f("B u")
test_that(desc = "Test for improper input (numeric)",       expect_error(f(1)))
test_that(desc = "Test for improper input (symbol)",       expect_error(f("%")))
test_that(desc = "Test for propoer input (a)",       expect_equal(f("a"),0))
test_that(desc = "Test for proper input (A)",       expect_equal(f("B"),log(2)))
test_that(desc = "Test for improper input (numeric)",       expect_type(f("B u"),'double'))
if ( require("testthat") == FALSE ) {
install.packages("testthat",repos="https://cloud.r-project.org")
library(testthat)
}
class(log(2))
test_that(desc = "Test for improper input (numeric)",       expect_error(f(1)))
test_that(desc = "Test for improper input (symbol)",       expect_error(f("%")))
test_that(desc = "Test for propoer input (a)",       expect_equal(f("a"),0))
test_that(desc = "Test for proper input (A)",       expect_equal(f("B"),log(2)))
test_that(desc = "Test for improper input (numeric)",       expect_type(f("B u"),'double'))
if ( require("testthat") == FALSE ) {
install.packages("testthat",repos="https://cloud.r-project.org")
library(testthat)
}
class(log(2))
test_that(desc = "Test for improper input (numeric)",       expect_error(f(1)))
test_that(desc = "Test for improper input (symbol)",       expect_error(f("%")))
test_that(desc = "Test for propoer input (a)",       expect_equal(f("a"),0))
test_that(desc = "Test for proper input (A)",       expect_equal(f("B"),log(2)))
test_that(desc = "Test for improper input (numeric)",       expect_type(f("B u"),'numeric'))
if ( require("testthat") == FALSE ) {
install.packages("testthat",repos="https://cloud.r-project.org")
library(testthat)
}
class(log(2))
test_that(desc = "Test for improper input (numeric)",       expect_error(f(1)))
test_that(desc = "Test for improper input (symbol)",       expect_error(f("%")))
test_that(desc = "Test for propoer input (a)",       expect_equal(f("a"),0))
test_that(desc = "Test for proper input (A)",       expect_equal(f("B"),log(2)))
test_that(desc = "Test for improper input (numeric)",       expect_type(log(2),'numeric'))
if ( require("testthat") == FALSE ) {
install.packages("testthat",repos="https://cloud.r-project.org")
library(testthat)
}
class(log(2))
test_that(desc = "Test for improper input (numeric)",       expect_error(f(1)))
test_that(desc = "Test for improper input (symbol)",       expect_error(f("%")))
test_that(desc = "Test for propoer input (a)",       expect_equal(f("a"),0))
test_that(desc = "Test for proper input (A)",       expect_equal(f("B"),log(2)))
test_that(desc = "Test for improper input (numeric)",       expect_warning(f("B u")))
f = function(letter) {
if (class(letter)!='string'){
stop("The input must be a string")
}
return(log(which(letters==letter)))
}
f = function(letter) {
if (class(letter)!='string'){
stop("The input must be a string")
}
return(log(which(letters==letter)))
}
f(1)
f = function(letter) {
if (class(letter)!='string'){
stop("The input must be a letter string")
}
if (length(letter)>1){
warning("The input is more than one character")
letter = letter[1]
}
letter = tolower(letter)
return(log(which(letters==letter)))
}
f(1)
f = function(letter) {
if (class(letter)!='string'){
stop("The input must be a letter string")
}
if (length(letter)>1){
warning("The input is more than one character")
letter = letter[1]
}
letter = tolower(letter)
return(log(which(letters==letter)))
}
f("AB")
f = function(letter) {
if (class(letter)!='string'){
stop("The input must be a letter string")
}
if (length(letter)>1){
warning("The input is more than one character")
letter = letter[1]
}
letter = tolower(letter)
print(letter)
return(log(which(letters==letter)))
}
f("AB")
if ( require("testthat") == FALSE ) {
install.packages("testthat",repos="https://cloud.r-project.org")
library(testthat)
}
class(log(2))
test_that(desc = "Test for improper input (numeric)",       expect_error(f(1)))
test_that(desc = "Test for improper input (symbol)",       expect_error(f("%")))
test_that(desc = "Test for propoer input (a)",       expect_equal(f("a"),0))
test_that(desc = "Test for proper input (B)",       expect_equal(f("B"),log(2)))
test_that(desc = "Test for proper input (Multiple character)",       expect_warning(f(c("B u","b a"))))
if ( require("testthat") == FALSE ) {
install.packages("testthat",repos="https://cloud.r-project.org")
library(testthat)
}
test_that(desc = "Test for improper input (numeric)",       expect_error(f(1)))
test_that(desc = "Test for improper input (symbol)",       expect_error(f("%")))
test_that(desc = "Test for propoer input (a)",       expect_equal(f("a"),0))
test_that(desc = "Test for proper input (B)",       expect_equal(f("B"),log(2)))
test_that(desc = "Test for proper input (Multiple character)",       expect_warning(f(c("B u","b a"))))
f = function(letter) {
if (class(letter)!='string'){
stop("The input must be a letter string")
}
if (length(letter)>1){
warning("The input is more than one character")
letter = letter[1]
}
letter = tolower(letter)
print(letter)
return(log(which(letters==letter)))
}
f(c("B u","b a"))
f = function(letter) {
if (length(letter)>1){
warning("The input is more than one string")
letter = letter[1]
}
if (class(letter)!='string'){
stop("The input must be a letter string")
}
letter = tolower(letter)
print(letter)
return(log(which(letters==letter)))
}
f(c("B u","b a"))
f = function(letter) {
if (class(letter)!='string'){
stop("The input must be a single letter character")
}
if (length(letter)>1){
letter = letter[1]
}
letter = tolower(letter)
print(letter)
return(log(which(letters==letter)))
}
f(c("B u","b a"))
if ( require("testthat") == FALSE ) {
install.packages("testthat",repos="https://cloud.r-project.org")
library(testthat)
}
test_that(desc = "Test for improper input (numeric)",       expect_error(f(1)))
test_that(desc = "Test for improper input (symbol)",       expect_error(f("%")))
test_that(desc = "Test for propoer input (a)",       expect_equal(f("a"),0))
test_that(desc = "Test for proper input (B)",       expect_equal(f("B"),log(2)))
test_that(desc = "Test for proper input (Multiple character)",       expect_warning(f(c("B u","b a"))))
if ( require("testthat") == FALSE ) {
install.packages("testthat",repos="https://cloud.r-project.org")
library(testthat)
}
test_that(desc = "Test for improper input (numeric)",       expect_error(f(1)))
test_that(desc = "Test for improper input (symbol)",       expect_error(f("%")))
test_that(desc = "Test for propoer input (a)",       expect_equal(f("a"),0))
test_that(desc = "Test for proper input (B)",       expect_equal(f("B"),log(2)))
test_that(desc = "Test for proper input (Multiple character)",       expect_warning(f(c("B u"))))
f = function(letter) {
if (class(letter)!='string'){
stop("The input must be a letter character")
}
if (is.character(input) & length(input) != 1){
warning("Length of input greater than 1.")
letter = letter[1]
}
letter = tolower(letter)
print(letter)
return(log(which(letters==letter)))
}
f(c("B u"))
f = function(letter) {
if (class(letter)!='string'){
stop("The input must be a letter character")
}
if (is.character(input) & length(input) != 1){
warning("Length of input greater than 1.")
letter = letter[1]
}
letter = tolower(letter)
print(letter)
return(log(which(letters==letter)))
}
f("B u")
f = function(letter) {
if (class(letter)!='string'){
stop("The input must be a letter character")
}
if (is.character(input) & length(input) != 1){
warning("Length of input greater than 1.")
letter = letter[1:]
f = function(letter) {
if (class(letter)!='string'){
stop("The input must be a letter character")
}
if (is.character(input) & length(input) != 1){
warning("Length of input greater than 1.")
letter = substring(letter, 1, 1)
}
letter = tolower(letter)
print(letter)
return(log(which(letters==letter)))
}
f("B u")
f = function(letter) {
if (class(letter)!='character'){
stop("The input must be a letter character")
}
if (is.character(input) & length(input) != 1){
warning("Length of input greater than 1.")
letter = substring(letter, 1, 1)
}
letter = tolower(letter)
print(letter)
return(log(which(letters==letter)))
}
f("B u")
f = function(letter) {
if (class(letter)!='character'){
stop("The input must be a letter character")
}
if (is.character(letter) & length(letter) != 1){
warning("Length of input greater than 1.")
letter = substring(letter, 1, 1)
}
letter = tolower(letter)
print(letter)
return(log(which(letters==letter)))
}
f("B u")
f = function(letter) {
if (class(letter)!='character'){
stop("The input must be a letter character")
}
if (is.character(letter) & length(letter) > 1){
warning("Length of input greater than 1.")
letter = substring(letter, 1, 1)
}
letter = tolower(letter)
print(letter)
return(log(which(letters==letter)))
}
f("B u")
f = function(letter) {
if (!is.character(letter)){
stop("The input must be a letter character")
}
if (is.character(letter) & length(letter) > 1){
warning("Length of input greater than 1.")
letter = substring(letter, 1, 1)
}
letter = tolower(letter)
print(letter)
return(log(which(letters==letter)))
}
f("B u")
f = function(letter) {
if (!is.character(letter)){
stop("The input must be a letter character")
}
if (length(letter) > 1){
warning("Length of input greater than 1.")
letter = substring(letter, 1, 1)
}
letter = tolower(letter)
print(letter)
return(log(which(letters==letter)))
}
f("B u")
f = function(letter) {
if (!is.character(letter)){
stop("The input must be a letter character")
}
if (size(letter) > 1){
warning("Length of input greater than 1.")
letter = substring(letter, 1, 1)
}
letter = tolower(letter)
print(letter)
return(log(which(letters==letter)))
}
f("B u")
f = function(letter) {
if (!is.character(letter)){
stop("The input must be a letter character")
}
if (nchar(letter) > 1){
warning("Length of input greater than 1.")
letter = substring(letter, 1, 1)
}
letter = tolower(letter)
print(letter)
return(log(which(letters==letter)))
}
f("B u")
f = function(letter) {
if (!is.character(letter)){
stop("The input must be a letter character")
}
if (nchar(letter) > 1){
warning("Length of input greater than 1.")
letter = substring(letter, 1, 1)
}
letter = tolower(letter)
return(log(which(letters==letter)))
}
f("B u")
f = function(letter) {
if (!is.character(letter)){
stop("The input must be a letter character")
}
if (nchar(letter) > 1){
warning("Length of input greater than 1.")
letter = substring(letter, 1, 1)
}
letter = tolower(letter)
return(log(which(letters==letter)))
}
test_that(desc = "Test for improper input (numeric)",       expect_error(f(1)))
test_that(desc = "Test for improper input (symbol)",       expect_error(f("%")))
test_that(desc = "Test for propoer input (a)",       expect_equal(f("a"),0))
test_that(desc = "Test for proper input (B)",       expect_equal(f("B"),log(2)))
test_that(desc = "Test for proper input (Multiple character)",       expect_warning(f(c("B u"))))
f = function(letter) {
if (!is.character(letter)){
stop("The input must be a letter character")
}
if (nchar(letter) > 1){
warning("Length of input greater than 1.")
letter = substring(letter, 1, 1)
}
if (!(letter %in% letters)){
warning("Length of input greater than 1.")
letter = substring(letter, 1, 1)
}
letter = tolower(letter)
return(log(which(letters==letter)))
}
test_that(desc = "Test for improper input (numeric)",       expect_error(f(1)))
test_that(desc = "Test for improper input (symbol)",       expect_error(f("%")))
test_that(desc = "Test for propoer input (a)",       expect_equal(f("a"),0))
test_that(desc = "Test for proper input (B)",       expect_equal(f("B"),log(2)))
test_that(desc = "Test for proper input (Multiple character)",       expect_warning(f(c("B u"))))
f = function(letter) {
if (!is.character(letter)){
stop("The input must be a letter character")
}
if (nchar(letter) > 1){
warning("Length of input greater than 1.")
letter = substring(letter, 1, 1)
}
if (!(letter %in% letters)){
stop("None letter character")
}
letter = tolower(letter)
return(log(which(letters==letter)))
}
test_that(desc = "Test for improper input (numeric)",       expect_error(f(1)))
test_that(desc = "Test for improper input (symbol)",       expect_error(f("%")))
test_that(desc = "Test for propoer input (a)",       expect_equal(f("a"),0))
test_that(desc = "Test for proper input (B)",       expect_equal(f("B"),log(2)))
test_that(desc = "Test for proper input (Multiple character)",       expect_warning(f(c("B u"))))
f = function(letter) {
if (!is.character(letter)){
stop("The input must be a letter character")
}
if (nchar(letter) > 1){
warning("Length of input greater than 1.")
letter = substring(letter, 1, 1)
}
letter = tolower(letter)
if (!(letter %in% letters)){
stop("None letter character")
}
return(log(which(letters==letter)))
}
test_that(desc = "Test for improper input (numeric)",       expect_error(f(1)))
test_that(desc = "Test for improper input (symbol)",       expect_error(f("%")))
test_that(desc = "Test for propoer input (a)",       expect_equal(f("a"),0))
test_that(desc = "Test for proper input (B)",       expect_equal(f("B"),log(2)))
test_that(desc = "Test for proper input (Multiple character)",       expect_warning(f(c("B u"))))
